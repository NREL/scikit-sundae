name: release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      tag_version: ${{ steps.tag.outputs.tag_version }}
      local_version: ${{ steps.local.outputs.local_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Extract tag version details
        id: tag
        run: |
          if [[ "${{ github.ref_type }}" = "tag" ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
            echo "tag_version=$TAG_VERSION" >> "$GITHUB_OUTPUT"
            echo "Tag version is $TAG_VERSION"
          else
            echo "No tag found"
            exit 1
          fi

      - name: Extract local package version
        id: local
        env:  # Don't let extensions compile, just grab version
          BUILD_SDIST: 1  
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools numpy cython

          LOCAL_VERSION=$(python setup.py --version)

          echo "local_version=$LOCAL_VERSION" >> "$GITHUB_OUTPUT"
          echo "Local version is $LOCAL_VERSION"


  check-version:
    needs: details
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Check version details agasint PyPI, tag, etc.
        run: |
          TAG_VERSION=${{ needs.details.outputs.tag_version }}
          LOCAL_VERSION=${{ needs.details.outputs.local_version }}

          cd scripts

          pip install requests packaging
          python version_checker.py --tag="$TAG_VERSION" --local="$LOCAL_VERSION"

  build-wheels:
    name: (wheel ${{ matrix.python-version }}, ${{ matrix.os }})
    needs: [details, check-version]
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os: [macos-13, macos-latest, windows-latest, ubuntu-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python and SUNDIALS
        uses: mamba-org/setup-micromamba@v2
        with:  # ci_environment.yml specifies sundials version to compile
          environment-file: environments/ci_environment.yml
          create-args: python=${{ matrix.python-version }}

      - name: Install build
        run: pip install build

      - name: List info
        run: |
          micromamba info
          micromamba list

      - name: Set up environment variables for MacOS
        if: runner.os == 'macOS'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          echo "LDFLAGS=-headerpad_max_install_names" >> $GITHUB_ENV
          
      - name: Build wheels
        run: python -m build --wheel --verbose
          
      - name: Repair Windows wheels
        if: runner.os == 'Windows'
        run: |
          pip install delvewheel
          for whl in dist/*sundae*.whl; do 
          delvewheel repair "$whl" -w wheels/ || exit 1;
          done
          
      - name: Repair MacOS wheels
        if: runner.os == 'macOS'
        run: |
          echo "DYLD_LIBRARY_PATH=$CONDA_PREFIX/lib" >> $GITHUB_ENV

          pip install delocate
          for whl in dist/*sundae*.whl; do
            delocate-wheel "$whl" -w wheels/ || exit 1;
          done

      - name: Repair Linux wheels
        if: runner.os == 'Linux'
        run: |
          pip install auditwheel
          for whl in dist/*sundae*.whl; do
            auditwheel repair "$whl" --plat manylinux2014_x86_64 -w wheels/ || exit 1;
          done
        
      - name: List files in wheels dir
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            dir wheels
          else
            ls wheels
          fi
        
      - name: Test in clean environment
        env:  # Remove known SUNDIALS header and lib paths
          DYLD_LIBRARY_PATH:
        run: |
          micromamba uninstall sundials
          micromamba create -n test python=${{ matrix.python-version }}
          micromamba activate test

          python -m pip install --upgrade pip
          pip install wheels/*.whl -v
          
          pip install pandas pytest
          pytest ./tests

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-wheels-${{ matrix.python-version }}-${{ matrix.os }}
          path: wheels/*.whl

  build-sdist:
    name: (sdist ${{ matrix.python-version }}, ${{ matrix.os }})
    needs: [details, check-version]
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.13"]

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python and SUNDIALS
        uses: mamba-org/setup-micromamba@v2
        with:  # ci_environment.yml specifies sundials version to compile
          environment-file: environments/ci_environment.yml
          create-args: python=${{ matrix.python-version }}

      - name: Install build
        run: pip install build

      - name: Build sdist
        env:  # Don't compile extensions if just building sdist
          BUILD_SDIST: 1
        run: |
          echo "BUILD_SDIST is set to: $BUILD_SDIST"
          python -m build --sdist
          
      - name: Test source installation
        env:  # Make sure extensions compile during actual install
          BUILD_SDIST: 0
        run: |
          echo "BUILD_SDIST is set to: $BUILD_SDIST"
          python -m pip install --upgrade pip
          pip install dist/*.tar.gz -v
          
          pip install pandas pytest
          pytest ./tests

      - name: Upload tarball
        uses: actions/upload-artifact@v4
        with:
          name: dist-sdist
          path: dist/*.tar.gz

  pypi-publish:
    name: Upload to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: dist-*
          merge-multiple: true

      - name: Check files
        run: ls dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install twine
        run: pip install twine

      - name: Check builds and upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine check dist/*
          twine upload dist/*
